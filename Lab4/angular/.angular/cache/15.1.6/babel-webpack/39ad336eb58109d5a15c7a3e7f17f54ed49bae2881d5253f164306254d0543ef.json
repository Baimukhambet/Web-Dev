{"ast":null,"code":"import _asyncToGenerator from \"/Users/tima/kbtu/4thSemester/web/Lab4/angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (reference, floating, config) {\n    const {\n      placement = 'bottom',\n      strategy = 'absolute',\n      middleware = [],\n      platform\n    } = config;\n    const validMiddleware = middleware.filter(Boolean);\n    const rtl = yield platform.isRTL == null ? void 0 : platform.isRTL(floating);\n    {\n      if (platform == null) {\n        console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n      }\n      if (validMiddleware.filter(_ref => {\n        let {\n          name\n        } = _ref;\n        return name === 'autoPlacement' || name === 'flip';\n      }).length > 1) {\n        throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n      }\n      if (!reference || !floating) {\n        console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n      }\n    }\n    let rects = yield platform.getElementRects({\n      reference,\n      floating,\n      strategy\n    });\n    let {\n      x,\n      y\n    } = computeCoordsFromPlacement(rects, placement, rtl);\n    let statefulPlacement = placement;\n    let middlewareData = {};\n    let resetCount = 0;\n    for (let i = 0; i < validMiddleware.length; i++) {\n      const {\n        name,\n        fn\n      } = validMiddleware[i];\n      const {\n        x: nextX,\n        y: nextY,\n        data,\n        reset\n      } = yield fn({\n        x,\n        y,\n        initialPlacement: placement,\n        placement: statefulPlacement,\n        strategy,\n        middlewareData,\n        rects,\n        platform,\n        elements: {\n          reference,\n          floating\n        }\n      });\n      x = nextX != null ? nextX : x;\n      y = nextY != null ? nextY : y;\n      middlewareData = {\n        ...middlewareData,\n        [name]: {\n          ...middlewareData[name],\n          ...data\n        }\n      };\n      {\n        if (resetCount > 50) {\n          console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n        }\n      }\n      if (reset && resetCount <= 50) {\n        resetCount++;\n        if (typeof reset === 'object') {\n          if (reset.placement) {\n            statefulPlacement = reset.placement;\n          }\n          if (reset.rects) {\n            rects = reset.rects === true ? yield platform.getElementRects({\n              reference,\n              floating,\n              strategy\n            }) : reset.rects;\n          }\n          ({\n            x,\n            y\n          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n        }\n        i = -1;\n        continue;\n      }\n    }\n    return {\n      x,\n      y,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData\n    };\n  });\n  return function computePosition(_x, _x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nfunction detectOverflow(_x4, _x5) {\n  return _detectOverflow.apply(this, arguments);\n}\nfunction _detectOverflow() {\n  _detectOverflow = _asyncToGenerator(function* (state, options) {\n    var _await$platform$isEle;\n    if (options === void 0) {\n      options = {};\n    }\n    const {\n      x,\n      y,\n      platform,\n      rects,\n      elements,\n      strategy\n    } = state;\n    const {\n      boundary = 'clippingAncestors',\n      rootBoundary = 'viewport',\n      elementContext = 'floating',\n      altBoundary = false,\n      padding = 0\n    } = options;\n    const paddingObject = getSideObjectFromPadding(padding);\n    const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n    const element = elements[altBoundary ? altContext : elementContext];\n    const clippingClientRect = rectToClientRect(yield platform.getClippingRect({\n      element: ((_await$platform$isEle = yield platform.isElement == null ? void 0 : platform.isElement(element)) != null ? _await$platform$isEle : true) ? element : element.contextElement || (yield platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating)),\n      boundary,\n      rootBoundary,\n      strategy\n    }));\n    const rect = elementContext === 'floating' ? {\n      ...rects.floating,\n      x,\n      y\n    } : rects.reference;\n    const offsetParent = yield platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating);\n    const offsetScale = (yield platform.isElement == null ? void 0 : platform.isElement(offsetParent)) ? (yield platform.getScale == null ? void 0 : platform.getScale(offsetParent)) || {\n      x: 1,\n      y: 1\n    } : {\n      x: 1,\n      y: 1\n    };\n    const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n      rect,\n      offsetParent,\n      strategy\n    }) : rect);\n    return {\n      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n    };\n  });\n  return _detectOverflow.apply(this, arguments);\n}\nconst min = Math.min;\nconst max = Math.max;\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  fn(state) {\n    return _asyncToGenerator(function* () {\n      // Since `element` is required, we don't Partial<> the type.\n      const {\n        element,\n        padding = 0\n      } = options || {};\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        platform\n      } = state;\n      if (element == null) {\n        {\n          console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n        }\n        return {};\n      }\n      const paddingObject = getSideObjectFromPadding(padding);\n      const coords = {\n        x,\n        y\n      };\n      const axis = getMainAxisFromPlacement(placement);\n      const length = getLengthFromAxis(axis);\n      const arrowDimensions = yield platform.getDimensions(element);\n      const minProp = axis === 'y' ? 'top' : 'left';\n      const maxProp = axis === 'y' ? 'bottom' : 'right';\n      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n      const startDiff = coords[axis] - rects.reference[axis];\n      const arrowOffsetParent = yield platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element);\n      let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n      if (clientSize === 0) {\n        clientSize = rects.floating[length];\n      }\n      const centerToReference = endDiff / 2 - startDiff / 2;\n\n      // Make sure the arrow doesn't overflow the floating element if the center\n      // point is outside the floating element's bounds.\n      const min = paddingObject[minProp];\n      const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n      const offset = within(min, center, max);\n\n      // If the reference is small enough that the arrow's padding causes it to\n      // to point to nothing for an aligned placement, adjust the offset of the\n      // floating element itself. This stops `shift()` from taking action, but can\n      // be worked around by calling it again after the `arrow()` if desired.\n      const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n      const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n      return {\n        [axis]: coords[axis] - alignmentOffset,\n        data: {\n          [axis]: offset,\n          centerOffset: center - offset\n        }\n      };\n    })();\n  }\n});\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n        const {\n          rects,\n          middlewareData,\n          placement,\n          platform,\n          elements\n        } = state;\n        const {\n          crossAxis = false,\n          alignment,\n          allowedPlacements = allPlacements,\n          autoAlignment = true,\n          ...detectOverflowOptions\n        } = options;\n        const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n        const overflow = yield detectOverflow(state, detectOverflowOptions);\n        const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n        const currentPlacement = placements[currentIndex];\n        if (currentPlacement == null) {\n          return {};\n        }\n        const {\n          main,\n          cross\n        } = getAlignmentSides(currentPlacement, rects, yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n\n        // Make `computeCoords` start from the right place.\n        if (placement !== currentPlacement) {\n          return {\n            reset: {\n              placement: placements[0]\n            }\n          };\n        }\n        const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n        const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n          placement: currentPlacement,\n          overflows: currentOverflows\n        }];\n        const nextPlacement = placements[currentIndex + 1];\n\n        // There are more placements to check.\n        if (nextPlacement) {\n          return {\n            data: {\n              index: currentIndex + 1,\n              overflows: allOverflows\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n        const placementsSortedByMostSpace = allOverflows.map(d => {\n          const alignment = getAlignment(d.placement);\n          return [d.placement, alignment && crossAxis ?\n          // Check along the mainAxis and main crossAxis side.\n          d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n          // Check only the mainAxis.\n          d.overflows[0], d.overflows];\n        }).sort((a, b) => a[1] - b[1]);\n        const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n        // Aligned placements should not check their opposite crossAxis\n        // side.\n        getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n        const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n        if (resetPlacement !== placement) {\n          return {\n            data: {\n              index: currentIndex + 1,\n              overflows: allOverflows\n            },\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n        return {};\n      })();\n    }\n  };\n};\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        var _middlewareData$flip;\n        const {\n          placement,\n          middlewareData,\n          rects,\n          initialPlacement,\n          platform,\n          elements\n        } = state;\n        const {\n          mainAxis: checkMainAxis = true,\n          crossAxis: checkCrossAxis = true,\n          fallbackPlacements: specifiedFallbackPlacements,\n          fallbackStrategy = 'bestFit',\n          fallbackAxisSideDirection = 'none',\n          flipAlignment = true,\n          ...detectOverflowOptions\n        } = options;\n        const side = getSide(placement);\n        const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n        const rtl = yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n        if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n        }\n        const placements = [initialPlacement, ...fallbackPlacements];\n        const overflow = yield detectOverflow(state, detectOverflowOptions);\n        const overflows = [];\n        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n        if (checkMainAxis) {\n          overflows.push(overflow[side]);\n        }\n        if (checkCrossAxis) {\n          const {\n            main,\n            cross\n          } = getAlignmentSides(placement, rects, rtl);\n          overflows.push(overflow[main], overflow[cross]);\n        }\n        overflowsData = [...overflowsData, {\n          placement,\n          overflows\n        }];\n\n        // One or more sides is overflowing.\n        if (!overflows.every(side => side <= 0)) {\n          var _middlewareData$flip2, _overflowsData$filter;\n          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n          const nextPlacement = placements[nextIndex];\n          if (nextPlacement) {\n            // Try next placement and re-run the lifecycle.\n            return {\n              data: {\n                index: nextIndex,\n                overflows: overflowsData\n              },\n              reset: {\n                placement: nextPlacement\n              }\n            };\n          }\n\n          // First, find the candidates that fit on the mainAxis side of overflow,\n          // then find the placement that fits the best on the main crossAxis side.\n          let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n          // Otherwise fallback.\n          if (!resetPlacement) {\n            switch (fallbackStrategy) {\n              case 'bestFit':\n                {\n                  var _overflowsData$map$so;\n                  const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                  if (placement) {\n                    resetPlacement = placement;\n                  }\n                  break;\n                }\n              case 'initialPlacement':\n                resetPlacement = initialPlacement;\n                break;\n            }\n          }\n          if (placement !== resetPlacement) {\n            return {\n              reset: {\n                placement: resetPlacement\n              }\n            };\n          }\n        }\n        return {};\n      })();\n    }\n  };\n};\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        const {\n          strategy = 'referenceHidden',\n          ...detectOverflowOptions\n        } = options;\n        const {\n          rects\n        } = state;\n        switch (strategy) {\n          case 'referenceHidden':\n            {\n              const overflow = yield detectOverflow(state, {\n                ...detectOverflowOptions,\n                elementContext: 'reference'\n              });\n              const offsets = getSideOffsets(overflow, rects.reference);\n              return {\n                data: {\n                  referenceHiddenOffsets: offsets,\n                  referenceHidden: isAnySideFullyClipped(offsets)\n                }\n              };\n            }\n          case 'escaped':\n            {\n              const overflow = yield detectOverflow(state, {\n                ...detectOverflowOptions,\n                altBoundary: true\n              });\n              const offsets = getSideOffsets(overflow, rects.floating);\n              return {\n                data: {\n                  escapedOffsets: offsets,\n                  escaped: isAnySideFullyClipped(offsets)\n                }\n              };\n            }\n          default:\n            {\n              return {};\n            }\n        }\n      })();\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        const {\n          placement,\n          elements,\n          rects,\n          platform,\n          strategy\n        } = state;\n        // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n        // ClientRect's bounds, despite the event listener being triggered. A\n        // padding of 2 seems to handle this issue.\n        const {\n          padding = 2,\n          x,\n          y\n        } = options;\n        const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? yield platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n          rect: rects.reference,\n          offsetParent: yield platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating),\n          strategy\n        }) : rects.reference);\n        const clientRects = (yield platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference)) || [];\n        const paddingObject = getSideObjectFromPadding(padding);\n        function getBoundingClientRect() {\n          // There are two rects and they are disjoined.\n          if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n            // Find the first rect in which the point is fully inside.\n            return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n          }\n\n          // There are 2 or more connected rects.\n          if (clientRects.length >= 2) {\n            if (getMainAxisFromPlacement(placement) === 'x') {\n              const firstRect = clientRects[0];\n              const lastRect = clientRects[clientRects.length - 1];\n              const isTop = getSide(placement) === 'top';\n              const top = firstRect.top;\n              const bottom = lastRect.bottom;\n              const left = isTop ? firstRect.left : lastRect.left;\n              const right = isTop ? firstRect.right : lastRect.right;\n              const width = right - left;\n              const height = bottom - top;\n              return {\n                top,\n                bottom,\n                left,\n                right,\n                width,\n                height,\n                x: left,\n                y: top\n              };\n            }\n            const isLeftSide = getSide(placement) === 'left';\n            const maxRight = max(...clientRects.map(rect => rect.right));\n            const minLeft = min(...clientRects.map(rect => rect.left));\n            const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n            const top = measureRects[0].top;\n            const bottom = measureRects[measureRects.length - 1].bottom;\n            const left = minLeft;\n            const right = maxRight;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          return fallback;\n        }\n        const resetRects = yield platform.getElementRects({\n          reference: {\n            getBoundingClientRect\n          },\n          floating: elements.floating,\n          strategy\n        });\n        if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n          return {\n            reset: {\n              rects: resetRects\n            }\n          };\n        }\n        return {};\n      })();\n    }\n  };\n};\nfunction convertValueToCoords(_x6, _x7) {\n  return _convertValueToCoords.apply(this, arguments);\n}\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nfunction _convertValueToCoords() {\n  _convertValueToCoords = _asyncToGenerator(function* (state, value) {\n    const {\n      placement,\n      platform,\n      elements\n    } = state;\n    const rtl = yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating);\n    const side = getSide(placement);\n    const alignment = getAlignment(placement);\n    const isVertical = getMainAxisFromPlacement(placement) === 'x';\n    const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n    const crossAxisMulti = rtl && isVertical ? -1 : 1;\n    const rawValue = typeof value === 'function' ? value(state) : value;\n\n    // eslint-disable-next-line prefer-const\n    let {\n      mainAxis,\n      crossAxis,\n      alignmentAxis\n    } = typeof rawValue === 'number' ? {\n      mainAxis: rawValue,\n      crossAxis: 0,\n      alignmentAxis: null\n    } : {\n      mainAxis: 0,\n      crossAxis: 0,\n      alignmentAxis: null,\n      ...rawValue\n    };\n    if (alignment && typeof alignmentAxis === 'number') {\n      crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n    }\n    return isVertical ? {\n      x: crossAxis * crossAxisMulti,\n      y: mainAxis * mainAxisMulti\n    } : {\n      x: mainAxis * mainAxisMulti,\n      y: crossAxis * crossAxisMulti\n    };\n  });\n  return _convertValueToCoords.apply(this, arguments);\n}\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        const {\n          x,\n          y\n        } = state;\n        const diffCoords = yield convertValueToCoords(state, value);\n        return {\n          x: x + diffCoords.x,\n          y: y + diffCoords.y,\n          data: diffCoords\n        };\n      })();\n    }\n  };\n};\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        const {\n          x,\n          y,\n          placement\n        } = state;\n        const {\n          mainAxis: checkMainAxis = true,\n          crossAxis: checkCrossAxis = false,\n          limiter = {\n            fn: _ref => {\n              let {\n                x,\n                y\n              } = _ref;\n              return {\n                x,\n                y\n              };\n            }\n          },\n          ...detectOverflowOptions\n        } = options;\n        const coords = {\n          x,\n          y\n        };\n        const overflow = yield detectOverflow(state, detectOverflowOptions);\n        const mainAxis = getMainAxisFromPlacement(getSide(placement));\n        const crossAxis = getCrossAxis(mainAxis);\n        let mainAxisCoord = coords[mainAxis];\n        let crossAxisCoord = coords[crossAxis];\n        if (checkMainAxis) {\n          const minSide = mainAxis === 'y' ? 'top' : 'left';\n          const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n          const min = mainAxisCoord + overflow[minSide];\n          const max = mainAxisCoord - overflow[maxSide];\n          mainAxisCoord = within(min, mainAxisCoord, max);\n        }\n        if (checkCrossAxis) {\n          const minSide = crossAxis === 'y' ? 'top' : 'left';\n          const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n          const min = crossAxisCoord + overflow[minSide];\n          const max = crossAxisCoord - overflow[maxSide];\n          crossAxisCoord = within(min, crossAxisCoord, max);\n        }\n        const limitedCoords = limiter.fn({\n          ...state,\n          [mainAxis]: mainAxisCoord,\n          [crossAxis]: crossAxisCoord\n        });\n        return {\n          ...limitedCoords,\n          data: {\n            x: limitedCoords.x - x,\n            y: limitedCoords.y - y\n          }\n        };\n      })();\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    fn(state) {\n      return _asyncToGenerator(function* () {\n        const {\n          placement,\n          rects,\n          platform,\n          elements\n        } = state;\n        const {\n          apply = () => {},\n          ...detectOverflowOptions\n        } = options;\n        const overflow = yield detectOverflow(state, detectOverflowOptions);\n        const side = getSide(placement);\n        const alignment = getAlignment(placement);\n        const axis = getMainAxisFromPlacement(placement);\n        const isXAxis = axis === 'x';\n        const {\n          width,\n          height\n        } = rects.floating;\n        let heightSide;\n        let widthSide;\n        if (side === 'top' || side === 'bottom') {\n          heightSide = side;\n          widthSide = alignment === ((yield platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)) ? 'start' : 'end') ? 'left' : 'right';\n        } else {\n          widthSide = side;\n          heightSide = alignment === 'end' ? 'top' : 'bottom';\n        }\n        const overflowAvailableHeight = height - overflow[heightSide];\n        const overflowAvailableWidth = width - overflow[widthSide];\n        let availableHeight = overflowAvailableHeight;\n        let availableWidth = overflowAvailableWidth;\n        if (isXAxis) {\n          availableWidth = min(\n          // Maximum clipping viewport width\n          width - overflow.right - overflow.left, overflowAvailableWidth);\n        } else {\n          availableHeight = min(\n          // Maximum clipping viewport height\n          height - overflow.bottom - overflow.top, overflowAvailableHeight);\n        }\n        if (!state.middlewareData.shift && !alignment) {\n          const xMin = max(overflow.left, 0);\n          const xMax = max(overflow.right, 0);\n          const yMin = max(overflow.top, 0);\n          const yMax = max(overflow.bottom, 0);\n          if (isXAxis) {\n            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n          } else {\n            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n          }\n        }\n        yield apply({\n          ...state,\n          availableWidth,\n          availableHeight\n        });\n        const nextDimensions = yield platform.getDimensions(elements.floating);\n        if (width !== nextDimensions.width || height !== nextDimensions.height) {\n          return {\n            reset: {\n              rects: true\n            }\n          };\n        }\n        return {};\n      })();\n    }\n  };\n};\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };","map":{"version":3,"names":["getAlignment","placement","split","getLengthFromAxis","axis","getSide","getMainAxisFromPlacement","includes","computeCoordsFromPlacement","_ref","rtl","reference","floating","commonX","x","width","commonY","y","height","mainAxis","length","commonAlign","side","isVertical","coords","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","console","error","join","name","Error","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","fn","nextX","nextY","data","reset","initialPlacement","elements","warn","expandPaddingObject","padding","top","right","bottom","left","getSideObjectFromPadding","rectToClientRect","rect","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","paddingObject","altContext","element","clippingClientRect","getClippingRect","isElement","contextElement","getDocumentElement","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","min","Math","max","within","min$1","value","max$1","arrow","arrowDimensions","getDimensions","minProp","maxProp","endDiff","startDiff","arrowOffsetParent","clientSize","clientHeight","clientWidth","centerToReference","center","offset","shouldAddOffset","alignmentOffset","centerOffset","sides","allPlacements","reduce","acc","concat","oppositeSideMap","getOppositePlacement","replace","getAlignmentSides","alignment","mainAlignmentSide","main","cross","oppositeAlignmentMap","start","end","getOppositeAlignmentPlacement","getPlacementList","autoAlignment","allowedPlacements","allowedPlacementsSortedByAlignment","autoPlacement","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements","undefined","overflow","currentIndex","index","currentPlacement","currentOverflows","allOverflows","overflows","nextPlacement","placementsSortedByMostSpace","map","d","slice","v","sort","a","b","placementsThatFitOnEachSide","every","resetPlacement","getExpandedPlacements","oppositePlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","flip","_middlewareData$flip","checkMainAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","isBasePlacement","push","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","some","hide","offsets","referenceHiddenOffsets","referenceHidden","escapedOffsets","escaped","inline","fallback","clientRects","getClientRects","getBoundingClientRect","find","firstRect","lastRect","isTop","isLeftSide","maxRight","minLeft","measureRects","resetRects","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","alignmentAxis","diffCoords","getCrossAxis","shift","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","limitShift","rawOffset","computedOffset","len","limitMin","limitMax","_middlewareData$offse","_middlewareData$offse2","isOriginSide","size","apply","isXAxis","heightSide","widthSide","overflowAvailableHeight","overflowAvailableWidth","availableHeight","availableWidth","xMin","xMax","yMin","yMax","nextDimensions"],"sources":["/Users/tima/kbtu/4thSemester/web/Lab4/angular/node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs"],"sourcesContent":["function getAlignment(placement) {\n  return placement.split('-')[1];\n}\n\nfunction getLengthFromAxis(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\n\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\n\nfunction getMainAxisFromPlacement(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'x' : 'y';\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  const commonAlign = reference[length] / 2 - floating[length] / 2;\n  const side = getSide(placement);\n  const isVertical = mainAxis === 'x';\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a reference element when it is given a certain positioning strategy.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  {\n    if (platform == null) {\n      console.error(['Floating UI: `platform` property was not passed to config. If you', 'want to use Floating UI on the web, install @floating-ui/dom', 'instead of the /core package. Otherwise, you can create your own', '`platform`: https://floating-ui.com/docs/platform'].join(' '));\n    }\n    if (validMiddleware.filter(_ref => {\n      let {\n        name\n      } = _ref;\n      return name === 'autoPlacement' || name === 'flip';\n    }).length > 1) {\n      throw new Error(['Floating UI: duplicate `flip` and/or `autoPlacement` middleware', 'detected. This will lead to an infinite loop. Ensure only one of', 'either has been passed to the `middleware` array.'].join(' '));\n    }\n    if (!reference || !floating) {\n      console.error(['Floating UI: The reference and/or floating element was not defined', 'when `computePosition()` was called. Ensure that both elements have', 'been created and can be measured.'].join(' '));\n    }\n  }\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    {\n      if (resetCount > 50) {\n        console.warn(['Floating UI: The middleware lifecycle appears to be running in an', 'infinite loop. This is usually caused by a `reset` continually', 'being returned without a break condition.'].join(' '));\n      }\n    }\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\n\nfunction getSideObjectFromPadding(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\n\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = options;\n  const paddingObject = getSideObjectFromPadding(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction within(min$1, value, max$1) {\n  return max(min$1, min(value, max$1));\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = options || {};\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform\n    } = state;\n    if (element == null) {\n      {\n        console.warn('Floating UI: No `element` was passed to the `arrow` middleware.');\n      }\n      return {};\n    }\n    const paddingObject = getSideObjectFromPadding(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getMainAxisFromPlacement(placement);\n    const length = getLengthFromAxis(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const minProp = axis === 'y' ? 'top' : 'left';\n    const maxProp = axis === 'y' ? 'bottom' : 'right';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;\n    if (clientSize === 0) {\n      clientSize = rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min = paddingObject[minProp];\n    const max = clientSize - arrowDimensions[length] - paddingObject[maxProp];\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = within(min, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. This stops `shift()` from taking action, but can\n    // be worked around by calling it again after the `arrow()` if desired.\n    const shouldAddOffset = getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min ? min - center : max - center : 0;\n    return {\n      [axis]: coords[axis] - alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset\n      }\n    };\n  }\n});\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst allPlacements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-start\", side + \"-end\"), []);\n\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\n\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const mainAxis = getMainAxisFromPlacement(placement);\n  const length = getLengthFromAxis(mainAxis);\n  let mainAlignmentSide = mainAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return {\n    main: mainAlignmentSide,\n    cross: getOppositePlacement(mainAlignmentSide)\n  };\n}\n\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = allPlacements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const placements = alignment !== undefined || allowedPlacements === allPlacements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const {\n        main,\n        cross\n      } = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[main], overflow[cross]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\n\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = options;\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const {\n          main,\n          cross\n        } = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[main], overflow[cross]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = options;\n      const {\n        rects\n      } = state;\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = options;\n      const fallback = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n        rect: rects.reference,\n        offsetParent: await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating)),\n        strategy\n      }) : rects.reference);\n      const clientRects = (await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || [];\n      const paddingObject = getSideObjectFromPadding(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getMainAxisFromPlacement(placement) === 'x') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nasync function convertValueToCoords(state, value) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getMainAxisFromPlacement(placement) === 'x';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = typeof value === 'function' ? value(state) : value;\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (value) {\n  if (value === void 0) {\n    value = 0;\n  }\n  return {\n    name: 'offset',\n    options: value,\n    async fn(state) {\n      const {\n        x,\n        y\n      } = state;\n      const diffCoords = await convertValueToCoords(state, value);\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: diffCoords\n      };\n    }\n  };\n};\n\nfunction getCrossAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const mainAxis = getMainAxisFromPlacement(getSide(placement));\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = within(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = within(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = options;\n      const coords = {\n        x,\n        y\n      };\n      const mainAxis = getMainAxisFromPlacement(placement);\n      const crossAxis = getCrossAxis(mainAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = typeof offset === 'function' ? offset(state) : offset;\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = options;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const axis = getMainAxisFromPlacement(placement);\n      const isXAxis = axis === 'x';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isXAxis) {\n        availableWidth = min(\n        // Maximum clipping viewport width\n        width - overflow.right - overflow.left, overflowAvailableWidth);\n      } else {\n        availableHeight = min(\n        // Maximum clipping viewport height\n        height - overflow.bottom - overflow.top, overflowAvailableHeight);\n      }\n      if (!state.middlewareData.shift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isXAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, rectToClientRect, shift, size };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}