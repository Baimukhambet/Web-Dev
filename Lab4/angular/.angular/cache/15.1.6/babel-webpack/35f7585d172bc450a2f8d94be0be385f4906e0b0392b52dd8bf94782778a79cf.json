{"ast":null,"code":"export class IgcTreeSelectionService {\n  constructor(tree) {\n    this.itemSelection = new Set();\n    this.indeterminateItems = new Set();\n    this.tree = tree;\n  }\n  selectMultipleItems(item) {\n    if (!this.itemSelection.size) {\n      this.selectItem(item);\n      return;\n    }\n    const lastSelectedItemIndex = this.tree.items.indexOf(this.getSelectedItems()[this.itemSelection.size - 1]);\n    const currentItemIndex = this.tree.items.indexOf(item);\n    const items = this.tree.items.slice(Math.min(currentItemIndex, lastSelectedItemIndex), Math.max(currentItemIndex, lastSelectedItemIndex) + 1);\n    const added = items.filter(_item => !this.isItemSelected(_item));\n    const newSelection = this.getSelectedItems().concat(added);\n    this.emitItemSelectionEvent(newSelection, added, []);\n  }\n  selectItem(item) {\n    if (this.tree.selection === 'none') {\n      return;\n    }\n    this.emitItemSelectionEvent([...this.getSelectedItems(), item], [item], []);\n  }\n  deselectItem(item) {\n    const newSelection = this.getSelectedItems().filter(_item => _item !== item);\n    this.emitItemSelectionEvent(newSelection, [], [item]);\n  }\n  clearItemsSelection() {\n    const oldSelection = this.getSelectedItems();\n    const oldIndeterminate = this.getIndeterminateItems();\n    this.itemSelection.clear();\n    this.indeterminateItems.clear();\n    oldSelection.forEach(i => i.selected = false);\n    oldIndeterminate.forEach(i => i.indeterminate = false);\n  }\n  isItemSelected(item) {\n    return this.itemSelection.has(item);\n  }\n  isItemIndeterminate(item) {\n    return this.indeterminateItems.has(item);\n  }\n  ensureStateOnItemDelete(item) {\n    this.deselectItemsWithNoEvent([item, ...item.getChildren({\n      flatten: true\n    })], true);\n  }\n  retriggerItemState(item) {\n    if (item.selected) {\n      this.itemSelection.delete(item);\n      this.selectItemsWithNoEvent([item]);\n    } else {\n      this.itemSelection.add(item);\n      this.deselectItemsWithNoEvent([item]);\n    }\n  }\n  emitItemSelectionEvent(newSelection, added, removed) {\n    const currSelection = this.getSelectedItems();\n    if (this.areEqualCollections(currSelection, newSelection)) {\n      return;\n    }\n    if (this.tree.selection === 'cascade') {\n      this.emitCascadeItemSelectionEvent(currSelection, added, removed);\n      return;\n    }\n    const args = {\n      detail: {\n        newSelection\n      },\n      cancelable: true\n    };\n    const allowed = this.tree.emitEvent('igcSelection', args);\n    if (!allowed) {\n      return;\n    }\n    if (this.areEqualCollections(newSelection, args.detail.newSelection)) {\n      this.itemSelection = new Set(newSelection);\n      this.updateItemsState(currSelection);\n    }\n  }\n  selectItemsWithNoEvent(items) {\n    const oldSelection = this.getSelectedItems();\n    if (this.tree && this.tree.selection === 'cascade') {\n      this.cascadeSelectItemsWithNoEvent(items, oldSelection);\n      return;\n    }\n    items.forEach(item => this.itemSelection.add(item));\n    this.updateItemsState(oldSelection);\n  }\n  deselectItemsWithNoEvent(items, onDelete = false) {\n    if (this.tree && this.tree.selection === 'cascade') {\n      this.cascadeDeselectItemsWithNoEvent(items, onDelete);\n      return;\n    }\n    const itemSet = new Set(items);\n    const oldSelection = onDelete ? this.getSelectedItems().filter(i => !itemSet.has(i)) : this.getSelectedItems();\n    if (!items) {\n      this.itemSelection.clear();\n    } else {\n      items.forEach(item => this.itemSelection.delete(item));\n    }\n    this.updateItemsState(oldSelection);\n  }\n  emitCascadeItemSelectionEvent(currSelection, added, removed) {\n    const oldIndeterminate = this.getIndeterminateItems();\n    this.calculateItemsNewSelectionState(currSelection, added, removed);\n    const args = {\n      detail: {\n        newSelection: Array.from(this.itemsToBeSelected)\n      },\n      cancelable: true\n    };\n    const allowed = this.tree.emitEvent('igcSelection', args);\n    if (!allowed) {\n      return;\n    }\n    if (this.areEqualCollections(Array.from(this.itemsToBeSelected), args.detail.newSelection)) {\n      this.itemSelection = new Set(this.itemsToBeSelected);\n      this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n      this.updateItemsState(currSelection, oldIndeterminate);\n    }\n  }\n  cascadeSelectItemsWithNoEvent(items, oldSelection) {\n    const oldIndeterminate = this.getIndeterminateItems();\n    const newSelection = [...oldSelection, ...items];\n    const newSelectionSet = new Set(newSelection);\n    const removed = oldSelection.filter(x => !newSelectionSet.has(x));\n    const added = newSelection.filter(x => !this.itemSelection.has(x));\n    this.calculateItemsNewSelectionState(oldSelection, added, removed);\n    this.itemSelection = new Set(this.itemsToBeSelected);\n    this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n    this.updateItemsState(oldSelection, oldIndeterminate);\n  }\n  cascadeDeselectItemsWithNoEvent(items, onDelete = false) {\n    const itemSet = new Set(items);\n    const oldSelection = onDelete ? this.getSelectedItems().filter(i => !itemSet.has(i)) : this.getSelectedItems();\n    const oldIndeterminate = onDelete ? this.getIndeterminateItems().filter(i => !itemSet.has(i)) : this.getIndeterminateItems();\n    if (!items) {\n      this.itemSelection.clear();\n      this.indeterminateItems.clear();\n    } else {\n      this.calculateItemsNewSelectionState(oldSelection, [], items);\n      this.itemSelection = new Set(this.itemsToBeSelected);\n      this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n    }\n    this.updateItemsState(oldSelection, oldIndeterminate);\n  }\n  calculateItemsNewSelectionState(oldSelection, added, removed) {\n    this.itemsToBeSelected = new Set(oldSelection);\n    this.itemsToBeIndeterminate = new Set(this.getIndeterminateItems());\n    this.cascadeSelectionState(removed, false);\n    this.cascadeSelectionState(added, true);\n  }\n  cascadeSelectionState(items, selected) {\n    if (!items || items.length === 0) {\n      return;\n    }\n    const parents = new Set();\n    items.forEach(item => {\n      this.selectDeselectItem(item, selected);\n      const itemAndAllChildren = item.getChildren({\n        flatten: true\n      }) || [];\n      itemAndAllChildren.forEach(i => {\n        this.selectDeselectItem(i, selected);\n      });\n      if (item && item.parent) {\n        parents.add(item.parent);\n      }\n    });\n    for (const parent of parents) {\n      this.handleParentSelectionState(parent);\n    }\n  }\n  handleParentSelectionState(item) {\n    if (!item) {\n      return;\n    }\n    this.handleItemSelectionState(item);\n    if (item.parent) {\n      this.handleParentSelectionState(item.parent);\n    }\n  }\n  handleItemSelectionState(item) {\n    const itemsArray = item && item.getChildren() ? item.getChildren() : [];\n    if (itemsArray.length) {\n      if (itemsArray.every(i => this.itemsToBeSelected.has(i))) {\n        this.selectDeselectItem(item, true);\n      } else if (itemsArray.some(i => this.itemsToBeSelected.has(i) || this.itemsToBeIndeterminate.has(i))) {\n        this.selectDeselectItem(item, false, true);\n      } else {\n        this.selectDeselectItem(item, false);\n      }\n    } else {\n      if (this.isItemSelected(item)) {\n        this.selectDeselectItem(item, true);\n      } else {\n        this.selectDeselectItem(item, false);\n      }\n    }\n  }\n  updateItemsState(oldSelection, oldIndeterminate = []) {\n    const selected = new Set(oldSelection);\n    const indeterminated = new Set(oldIndeterminate);\n    this.getSelectedItems().forEach(i => {\n      if (!selected.has(i)) {\n        i.selected = true;\n      }\n    });\n    oldSelection.forEach(i => {\n      if (!this.itemSelection.has(i)) {\n        i.selected = false;\n      }\n    });\n    if (this.tree.selection === 'cascade') {\n      this.indeterminateItems.forEach(i => {\n        if (!indeterminated.has(i)) {\n          i.indeterminate = true;\n        }\n      });\n      oldIndeterminate.forEach(i => {\n        if (!this.indeterminateItems.has(i)) {\n          i.indeterminate = false;\n        }\n      });\n    }\n  }\n  getSelectedItems() {\n    return this.itemSelection.size ? Array.from(this.itemSelection) : [];\n  }\n  getIndeterminateItems() {\n    return this.indeterminateItems.size ? Array.from(this.indeterminateItems) : [];\n  }\n  areEqualCollections(first, second) {\n    return first.length === second.length && new Set(first.concat(second)).size === first.length;\n  }\n  selectDeselectItem(item, select, indeterminate = false) {\n    if (indeterminate) {\n      this.itemsToBeIndeterminate.add(item);\n      this.itemsToBeSelected.delete(item);\n      return;\n    }\n    if (select) {\n      this.itemsToBeSelected.add(item);\n      this.itemsToBeIndeterminate.delete(item);\n    } else {\n      this.itemsToBeSelected.delete(item);\n      this.itemsToBeIndeterminate.delete(item);\n    }\n  }\n}","map":{"version":3,"names":["IgcTreeSelectionService","constructor","tree","itemSelection","Set","indeterminateItems","selectMultipleItems","item","size","selectItem","lastSelectedItemIndex","items","indexOf","getSelectedItems","currentItemIndex","slice","Math","min","max","added","filter","_item","isItemSelected","newSelection","concat","emitItemSelectionEvent","selection","deselectItem","clearItemsSelection","oldSelection","oldIndeterminate","getIndeterminateItems","clear","forEach","i","selected","indeterminate","has","isItemIndeterminate","ensureStateOnItemDelete","deselectItemsWithNoEvent","getChildren","flatten","retriggerItemState","delete","selectItemsWithNoEvent","add","removed","currSelection","areEqualCollections","emitCascadeItemSelectionEvent","args","detail","cancelable","allowed","emitEvent","updateItemsState","cascadeSelectItemsWithNoEvent","onDelete","cascadeDeselectItemsWithNoEvent","itemSet","calculateItemsNewSelectionState","Array","from","itemsToBeSelected","itemsToBeIndeterminate","newSelectionSet","x","cascadeSelectionState","length","parents","selectDeselectItem","itemAndAllChildren","parent","handleParentSelectionState","handleItemSelectionState","itemsArray","every","some","indeterminated","first","second","select"],"sources":["/Users/tima/kbtu/4thSemester/web/Lab4/angular/node_modules/igniteui-webcomponents/components/tree/tree.selection.js"],"sourcesContent":["export class IgcTreeSelectionService {\n    constructor(tree) {\n        this.itemSelection = new Set();\n        this.indeterminateItems = new Set();\n        this.tree = tree;\n    }\n    selectMultipleItems(item) {\n        if (!this.itemSelection.size) {\n            this.selectItem(item);\n            return;\n        }\n        const lastSelectedItemIndex = this.tree.items.indexOf(this.getSelectedItems()[this.itemSelection.size - 1]);\n        const currentItemIndex = this.tree.items.indexOf(item);\n        const items = this.tree.items.slice(Math.min(currentItemIndex, lastSelectedItemIndex), Math.max(currentItemIndex, lastSelectedItemIndex) + 1);\n        const added = items.filter((_item) => !this.isItemSelected(_item));\n        const newSelection = this.getSelectedItems().concat(added);\n        this.emitItemSelectionEvent(newSelection, added, []);\n    }\n    selectItem(item) {\n        if (this.tree.selection === 'none') {\n            return;\n        }\n        this.emitItemSelectionEvent([...this.getSelectedItems(), item], [item], []);\n    }\n    deselectItem(item) {\n        const newSelection = this.getSelectedItems().filter((_item) => _item !== item);\n        this.emitItemSelectionEvent(newSelection, [], [item]);\n    }\n    clearItemsSelection() {\n        const oldSelection = this.getSelectedItems();\n        const oldIndeterminate = this.getIndeterminateItems();\n        this.itemSelection.clear();\n        this.indeterminateItems.clear();\n        oldSelection.forEach((i) => (i.selected = false));\n        oldIndeterminate.forEach((i) => (i.indeterminate = false));\n    }\n    isItemSelected(item) {\n        return this.itemSelection.has(item);\n    }\n    isItemIndeterminate(item) {\n        return this.indeterminateItems.has(item);\n    }\n    ensureStateOnItemDelete(item) {\n        this.deselectItemsWithNoEvent([item, ...item.getChildren({ flatten: true })], true);\n    }\n    retriggerItemState(item) {\n        if (item.selected) {\n            this.itemSelection.delete(item);\n            this.selectItemsWithNoEvent([item]);\n        }\n        else {\n            this.itemSelection.add(item);\n            this.deselectItemsWithNoEvent([item]);\n        }\n    }\n    emitItemSelectionEvent(newSelection, added, removed) {\n        const currSelection = this.getSelectedItems();\n        if (this.areEqualCollections(currSelection, newSelection)) {\n            return;\n        }\n        if (this.tree.selection === 'cascade') {\n            this.emitCascadeItemSelectionEvent(currSelection, added, removed);\n            return;\n        }\n        const args = {\n            detail: {\n                newSelection,\n            },\n            cancelable: true,\n        };\n        const allowed = this.tree.emitEvent('igcSelection', args);\n        if (!allowed) {\n            return;\n        }\n        if (this.areEqualCollections(newSelection, args.detail.newSelection)) {\n            this.itemSelection = new Set(newSelection);\n            this.updateItemsState(currSelection);\n        }\n    }\n    selectItemsWithNoEvent(items) {\n        const oldSelection = this.getSelectedItems();\n        if (this.tree && this.tree.selection === 'cascade') {\n            this.cascadeSelectItemsWithNoEvent(items, oldSelection);\n            return;\n        }\n        items.forEach((item) => this.itemSelection.add(item));\n        this.updateItemsState(oldSelection);\n    }\n    deselectItemsWithNoEvent(items, onDelete = false) {\n        if (this.tree && this.tree.selection === 'cascade') {\n            this.cascadeDeselectItemsWithNoEvent(items, onDelete);\n            return;\n        }\n        const itemSet = new Set(items);\n        const oldSelection = onDelete\n            ? this.getSelectedItems().filter((i) => !itemSet.has(i))\n            : this.getSelectedItems();\n        if (!items) {\n            this.itemSelection.clear();\n        }\n        else {\n            items.forEach((item) => this.itemSelection.delete(item));\n        }\n        this.updateItemsState(oldSelection);\n    }\n    emitCascadeItemSelectionEvent(currSelection, added, removed) {\n        const oldIndeterminate = this.getIndeterminateItems();\n        this.calculateItemsNewSelectionState(currSelection, added, removed);\n        const args = {\n            detail: {\n                newSelection: Array.from(this.itemsToBeSelected),\n            },\n            cancelable: true,\n        };\n        const allowed = this.tree.emitEvent('igcSelection', args);\n        if (!allowed) {\n            return;\n        }\n        if (this.areEqualCollections(Array.from(this.itemsToBeSelected), args.detail.newSelection)) {\n            this.itemSelection = new Set(this.itemsToBeSelected);\n            this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n            this.updateItemsState(currSelection, oldIndeterminate);\n        }\n    }\n    cascadeSelectItemsWithNoEvent(items, oldSelection) {\n        const oldIndeterminate = this.getIndeterminateItems();\n        const newSelection = [...oldSelection, ...items];\n        const newSelectionSet = new Set(newSelection);\n        const removed = oldSelection.filter((x) => !newSelectionSet.has(x));\n        const added = newSelection.filter((x) => !this.itemSelection.has(x));\n        this.calculateItemsNewSelectionState(oldSelection, added, removed);\n        this.itemSelection = new Set(this.itemsToBeSelected);\n        this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n        this.updateItemsState(oldSelection, oldIndeterminate);\n    }\n    cascadeDeselectItemsWithNoEvent(items, onDelete = false) {\n        const itemSet = new Set(items);\n        const oldSelection = onDelete\n            ? this.getSelectedItems().filter((i) => !itemSet.has(i))\n            : this.getSelectedItems();\n        const oldIndeterminate = onDelete\n            ? this.getIndeterminateItems().filter((i) => !itemSet.has(i))\n            : this.getIndeterminateItems();\n        if (!items) {\n            this.itemSelection.clear();\n            this.indeterminateItems.clear();\n        }\n        else {\n            this.calculateItemsNewSelectionState(oldSelection, [], items);\n            this.itemSelection = new Set(this.itemsToBeSelected);\n            this.indeterminateItems = new Set(this.itemsToBeIndeterminate);\n        }\n        this.updateItemsState(oldSelection, oldIndeterminate);\n    }\n    calculateItemsNewSelectionState(oldSelection, added, removed) {\n        this.itemsToBeSelected = new Set(oldSelection);\n        this.itemsToBeIndeterminate = new Set(this.getIndeterminateItems());\n        this.cascadeSelectionState(removed, false);\n        this.cascadeSelectionState(added, true);\n    }\n    cascadeSelectionState(items, selected) {\n        if (!items || items.length === 0) {\n            return;\n        }\n        const parents = new Set();\n        items.forEach((item) => {\n            this.selectDeselectItem(item, selected);\n            const itemAndAllChildren = item.getChildren({ flatten: true }) || [];\n            itemAndAllChildren.forEach((i) => {\n                this.selectDeselectItem(i, selected);\n            });\n            if (item && item.parent) {\n                parents.add(item.parent);\n            }\n        });\n        for (const parent of parents) {\n            this.handleParentSelectionState(parent);\n        }\n    }\n    handleParentSelectionState(item) {\n        if (!item) {\n            return;\n        }\n        this.handleItemSelectionState(item);\n        if (item.parent) {\n            this.handleParentSelectionState(item.parent);\n        }\n    }\n    handleItemSelectionState(item) {\n        const itemsArray = item && item.getChildren() ? item.getChildren() : [];\n        if (itemsArray.length) {\n            if (itemsArray.every((i) => this.itemsToBeSelected.has(i))) {\n                this.selectDeselectItem(item, true);\n            }\n            else if (itemsArray.some((i) => this.itemsToBeSelected.has(i) || this.itemsToBeIndeterminate.has(i))) {\n                this.selectDeselectItem(item, false, true);\n            }\n            else {\n                this.selectDeselectItem(item, false);\n            }\n        }\n        else {\n            if (this.isItemSelected(item)) {\n                this.selectDeselectItem(item, true);\n            }\n            else {\n                this.selectDeselectItem(item, false);\n            }\n        }\n    }\n    updateItemsState(oldSelection, oldIndeterminate = []) {\n        const selected = new Set(oldSelection);\n        const indeterminated = new Set(oldIndeterminate);\n        this.getSelectedItems().forEach((i) => {\n            if (!selected.has(i)) {\n                i.selected = true;\n            }\n        });\n        oldSelection.forEach((i) => {\n            if (!this.itemSelection.has(i)) {\n                i.selected = false;\n            }\n        });\n        if (this.tree.selection === 'cascade') {\n            this.indeterminateItems.forEach((i) => {\n                if (!indeterminated.has(i)) {\n                    i.indeterminate = true;\n                }\n            });\n            oldIndeterminate.forEach((i) => {\n                if (!this.indeterminateItems.has(i)) {\n                    i.indeterminate = false;\n                }\n            });\n        }\n    }\n    getSelectedItems() {\n        return this.itemSelection.size ? Array.from(this.itemSelection) : [];\n    }\n    getIndeterminateItems() {\n        return this.indeterminateItems.size\n            ? Array.from(this.indeterminateItems)\n            : [];\n    }\n    areEqualCollections(first, second) {\n        return (first.length === second.length &&\n            new Set(first.concat(second)).size === first.length);\n    }\n    selectDeselectItem(item, select, indeterminate = false) {\n        if (indeterminate) {\n            this.itemsToBeIndeterminate.add(item);\n            this.itemsToBeSelected.delete(item);\n            return;\n        }\n        if (select) {\n            this.itemsToBeSelected.add(item);\n            this.itemsToBeIndeterminate.delete(item);\n        }\n        else {\n            this.itemsToBeSelected.delete(item);\n            this.itemsToBeIndeterminate.delete(item);\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}