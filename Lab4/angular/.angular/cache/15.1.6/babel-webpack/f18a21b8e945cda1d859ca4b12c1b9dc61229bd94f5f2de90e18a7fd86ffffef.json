{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nclass StyleMapDirective extends Directive {\n  constructor(partInfo) {\n    var _a;\n    super(partInfo);\n    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== 'style' || ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n      throw new Error('The `styleMap` directive must be used in the `style` attribute ' + 'and must be the only part in the attribute.');\n    }\n  }\n  render(styleInfo) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&').toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n  update(part, [styleInfo]) {\n    const {\n      style\n    } = part.element;\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties.forEach(name => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = '';\n        }\n      }\n    });\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        if (name.includes('-')) {\n          style.setProperty(name, value);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the property values as CSS\n * properties. Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);","map":{"version":3,"names":["noChange","directive","Directive","PartType","StyleMapDirective","constructor","partInfo","_a","type","ATTRIBUTE","name","strings","length","Error","render","styleInfo","Object","keys","reduce","style","prop","value","replace","toLowerCase","update","part","element","_previousStyleProperties","undefined","Set","add","forEach","delete","includes","removeProperty","setProperty","styleMap"],"sources":["/Users/tima/kbtu/4thSemester/web/Lab4/angular/node_modules/lit-html/development/directives/style-map.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType, } from '../directive.js';\nclass StyleMapDirective extends Directive {\n    constructor(partInfo) {\n        var _a;\n        super(partInfo);\n        if (partInfo.type !== PartType.ATTRIBUTE ||\n            partInfo.name !== 'style' ||\n            ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n            throw new Error('The `styleMap` directive must be used in the `style` attribute ' +\n                'and must be the only part in the attribute.');\n        }\n    }\n    render(styleInfo) {\n        return Object.keys(styleInfo).reduce((style, prop) => {\n            const value = styleInfo[prop];\n            if (value == null) {\n                return style;\n            }\n            // Convert property names from camel-case to dash-case, i.e.:\n            //  `backgroundColor` -> `background-color`\n            // Vendor-prefixed names need an extra `-` appended to front:\n            //  `webkitAppearance` -> `-webkit-appearance`\n            // Exception is any property name containing a dash, including\n            // custom properties; we assume these are already dash-cased i.e.:\n            //  `--my-button-color` --> `--my-button-color`\n            prop = prop\n                .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n                .toLowerCase();\n            return style + `${prop}:${value};`;\n        }, '');\n    }\n    update(part, [styleInfo]) {\n        const { style } = part.element;\n        if (this._previousStyleProperties === undefined) {\n            this._previousStyleProperties = new Set();\n            for (const name in styleInfo) {\n                this._previousStyleProperties.add(name);\n            }\n            return this.render(styleInfo);\n        }\n        // Remove old properties that no longer exist in styleInfo\n        // We use forEach() instead of for-of so that re don't require down-level\n        // iteration.\n        this._previousStyleProperties.forEach((name) => {\n            // If the name isn't in styleInfo or it's null/undefined\n            if (styleInfo[name] == null) {\n                this._previousStyleProperties.delete(name);\n                if (name.includes('-')) {\n                    style.removeProperty(name);\n                }\n                else {\n                    // Note reset using empty string (vs null) as IE11 does not always\n                    // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    style[name] = '';\n                }\n            }\n        });\n        // Add or update properties\n        for (const name in styleInfo) {\n            const value = styleInfo[name];\n            if (value != null) {\n                this._previousStyleProperties.add(name);\n                if (name.includes('-')) {\n                    style.setProperty(name, value);\n                }\n                else {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    style[name] = value;\n                }\n            }\n        }\n        return noChange;\n    }\n}\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the property values as CSS\n * properties. Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}