{"ast":null,"code":"import { adoptStyles, css } from 'lit';\nimport { getTheme } from './config.js';\nimport { CHANGE_THEME_EVENT } from './theming-event.js';\nclass ThemingController {\n  constructor(host, themes) {\n    this.__themingEventHandler = () => {\n      this.adoptStyles();\n      this.host.requestUpdate();\n    };\n    this.host = host;\n    this.themes = themes;\n  }\n  hostConnected() {\n    this.adoptStyles();\n    window.addEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n  }\n  hostDisconnected() {\n    window.removeEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n  }\n  adoptStyles() {\n    this.theme = getTheme();\n    const ctor = this.host.constructor;\n    const supportsAdoptingStyleSheets = window.ShadowRoot && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\n    let styleSheet = css``;\n    const [theme] = Object.entries(this.themes).filter(([name]) => name === this.theme);\n    if (theme) {\n      const [_, cssResult] = theme;\n      styleSheet = cssResult;\n    }\n    if (!supportsAdoptingStyleSheets) {\n      [...this.host.renderRoot.querySelectorAll('style')].slice(1).forEach(tag => tag.remove());\n    }\n    adoptStyles(this.host.shadowRoot, [...ctor.elementStyles, styleSheet]);\n  }\n}\nconst _updateWhenThemeChanges = (host, themes) => {\n  const controller = new ThemingController(host, themes);\n  host.addController(controller);\n  return controller;\n};\nexport const updateWhenThemeChanges = _updateWhenThemeChanges;","map":{"version":3,"names":["adoptStyles","css","getTheme","CHANGE_THEME_EVENT","ThemingController","constructor","host","themes","__themingEventHandler","requestUpdate","hostConnected","window","addEventListener","hostDisconnected","removeEventListener","theme","ctor","supportsAdoptingStyleSheets","ShadowRoot","Document","prototype","CSSStyleSheet","styleSheet","Object","entries","filter","name","_","cssResult","renderRoot","querySelectorAll","slice","forEach","tag","remove","shadowRoot","elementStyles","_updateWhenThemeChanges","controller","addController","updateWhenThemeChanges"],"sources":["/Users/tima/kbtu/4thSemester/web/Lab4/angular/node_modules/igniteui-webcomponents/theming/theming-controller.js"],"sourcesContent":["import { adoptStyles, css, } from 'lit';\nimport { getTheme } from './config.js';\nimport { CHANGE_THEME_EVENT } from './theming-event.js';\nclass ThemingController {\n    constructor(host, themes) {\n        this.__themingEventHandler = () => {\n            this.adoptStyles();\n            this.host.requestUpdate();\n        };\n        this.host = host;\n        this.themes = themes;\n    }\n    hostConnected() {\n        this.adoptStyles();\n        window.addEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n    }\n    hostDisconnected() {\n        window.removeEventListener(CHANGE_THEME_EVENT, this.__themingEventHandler);\n    }\n    adoptStyles() {\n        this.theme = getTheme();\n        const ctor = this.host.constructor;\n        const supportsAdoptingStyleSheets = window.ShadowRoot &&\n            'adoptedStyleSheets' in Document.prototype &&\n            'replace' in CSSStyleSheet.prototype;\n        let styleSheet = css ``;\n        const [theme] = Object.entries(this.themes).filter(([name]) => name === this.theme);\n        if (theme) {\n            const [_, cssResult] = theme;\n            styleSheet = cssResult;\n        }\n        if (!supportsAdoptingStyleSheets) {\n            [...this.host.renderRoot.querySelectorAll('style')]\n                .slice(1)\n                .forEach((tag) => tag.remove());\n        }\n        adoptStyles(this.host.shadowRoot, [\n            ...ctor.elementStyles,\n            styleSheet,\n        ]);\n    }\n}\nconst _updateWhenThemeChanges = (host, themes) => {\n    const controller = new ThemingController(host, themes);\n    host.addController(controller);\n    return controller;\n};\nexport const updateWhenThemeChanges = _updateWhenThemeChanges;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,GAAG,QAAS,KAAK;AACvC,SAASC,QAAQ,QAAQ,aAAa;AACtC,SAASC,kBAAkB,QAAQ,oBAAoB;AACvD,MAAMC,iBAAiB,CAAC;EACpBC,WAAW,CAACC,IAAI,EAAEC,MAAM,EAAE;IACtB,IAAI,CAACC,qBAAqB,GAAG,MAAM;MAC/B,IAAI,CAACR,WAAW,EAAE;MAClB,IAAI,CAACM,IAAI,CAACG,aAAa,EAAE;IAC7B,CAAC;IACD,IAAI,CAACH,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;EACAG,aAAa,GAAG;IACZ,IAAI,CAACV,WAAW,EAAE;IAClBW,MAAM,CAACC,gBAAgB,CAACT,kBAAkB,EAAE,IAAI,CAACK,qBAAqB,CAAC;EAC3E;EACAK,gBAAgB,GAAG;IACfF,MAAM,CAACG,mBAAmB,CAACX,kBAAkB,EAAE,IAAI,CAACK,qBAAqB,CAAC;EAC9E;EACAR,WAAW,GAAG;IACV,IAAI,CAACe,KAAK,GAAGb,QAAQ,EAAE;IACvB,MAAMc,IAAI,GAAG,IAAI,CAACV,IAAI,CAACD,WAAW;IAClC,MAAMY,2BAA2B,GAAGN,MAAM,CAACO,UAAU,IACjD,oBAAoB,IAAIC,QAAQ,CAACC,SAAS,IAC1C,SAAS,IAAIC,aAAa,CAACD,SAAS;IACxC,IAAIE,UAAU,GAAGrB,GAAK,EAAC;IACvB,MAAM,CAACc,KAAK,CAAC,GAAGQ,MAAM,CAACC,OAAO,CAAC,IAAI,CAACjB,MAAM,CAAC,CAACkB,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,KAAKA,IAAI,KAAK,IAAI,CAACX,KAAK,CAAC;IACnF,IAAIA,KAAK,EAAE;MACP,MAAM,CAACY,CAAC,EAAEC,SAAS,CAAC,GAAGb,KAAK;MAC5BO,UAAU,GAAGM,SAAS;IAC1B;IACA,IAAI,CAACX,2BAA2B,EAAE;MAC9B,CAAC,GAAG,IAAI,CAACX,IAAI,CAACuB,UAAU,CAACC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAC9CC,KAAK,CAAC,CAAC,CAAC,CACRC,OAAO,CAAEC,GAAG,IAAKA,GAAG,CAACC,MAAM,EAAE,CAAC;IACvC;IACAlC,WAAW,CAAC,IAAI,CAACM,IAAI,CAAC6B,UAAU,EAAE,CAC9B,GAAGnB,IAAI,CAACoB,aAAa,EACrBd,UAAU,CACb,CAAC;EACN;AACJ;AACA,MAAMe,uBAAuB,GAAG,CAAC/B,IAAI,EAAEC,MAAM,KAAK;EAC9C,MAAM+B,UAAU,GAAG,IAAIlC,iBAAiB,CAACE,IAAI,EAAEC,MAAM,CAAC;EACtDD,IAAI,CAACiC,aAAa,CAACD,UAAU,CAAC;EAC9B,OAAOA,UAAU;AACrB,CAAC;AACD,OAAO,MAAME,sBAAsB,GAAGH,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}